# .github/workflows/build-binaries.yml

name: Build Static Binaries

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.target.os }}-${{ matrix.target.arch }}
    runs-on: ${{ matrix.target.os }}

    strategy:
      fail-fast: false
      matrix:
        target:
          # --- x86_64 (amd64) ---
          - os: ubuntu-latest
            arch: x64
            name: linux-x86_64
          - os: windows-latest
            arch: x64
            name: windows-x86_64
          #- os: macos-latest # This is an Intel runner
          #  arch: x64
          #  name: macos-x86_64

          # --- ARM64 (aarch64) ---
          # FIX: Pin to Ubuntu 22.04 for stable ARM64 apt repositories
          #- os: ubuntu-22.04
          #  arch: arm64
          #  name: linux-arm64
          #  debian_arch: arm64
          - os: macos-14 # This is an Apple Silicon runner
            arch: arm64
            name: macos-arm64

          # --- x86 (32-bit) ---
          - os: windows-latest
            arch: x86
            name: windows-x86

    steps:
    - name: 1. Check out repository code
      uses: actions/checkout@v4

    - name: 2. Set up QEMU for emulation (Linux only)
      if: runner.os == 'Linux' && matrix.target.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: 2.1 Install required multi-arch libraries (for QEMU)
      if: runner.os == 'Linux' && matrix.target.arch == 'arm64'
      run: |
        sudo dpkg --add-architecture ${{ matrix.target.debian_arch }}
        sudo apt-get update
        sudo apt-get install -y libc6:${{ matrix.target.debian_arch }}

    # FIX: Run brew install only on the Intel (x64) macOS runner
    - name: 2.2 Install gettext for dylib dependency on macOS (Intel only)
      if: runner.os == 'macOS' && matrix.target.arch == 'x64'
      run: brew install gettext

    - name: 3. Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: ${{ matrix.target.arch }}

    - name: 4. Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: 5. Build the binary with PyInstaller
      run: pyinstaller --name ipcalc-${{ matrix.target.name }} --onefile --clean ipcalc.py

    - name: 6. Upload the binary as a build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ipcalc-${{ matrix.target.name }}
        path: dist/ipcalc-${{ matrix.target.name }}*
